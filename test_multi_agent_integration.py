# Copyright (c) 2025 Bytedance Ltd. and/or its affiliates
# SPDX-License-Identifier: MIT

"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ DeerFlow
"""

import asyncio
import logging
from typing import Dict, Any

from src.graph.multi_agent_nodes import MultiAgentCoordinator, SubAgentTask, should_use_parallel_research
from src.graph.nodes import _should_use_multi_agent_planning
from src.config.configuration import Configuration
from src.prompts.multi_agent_planner_model import (
    UnifiedResearchPlan, 
    PlanningMode, 
    SubAgentStream,
    create_parallel_plan,
    create_sequential_plan
)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_planning_decision():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –æ —Ç–∏–ø–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
    simple_queries = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò?",
        "What is the GDP of France?",
        "–ö—Ç–æ –∏–∑–æ–±—Ä–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω?"
    ]
    
    # –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
    complex_queries = [
        "Analyze the comprehensive impact of AI on healthcare industry including market trends, stakeholders and future implications",
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ –≤–ª–∏—è–Ω–∏–µ –ò–ò –Ω–∞ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∫–ª—é—á–∞—è —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∏ –±—É–¥—É—â–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã",
        "Compare and evaluate the current landscape of quantum computing technologies and their detailed impact on cybersecurity",
        "Research the comprehensive ecosystem of renewable energy adoption across different markets and stakeholder groups"
    ]
    
    print("üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
    print("=" * 60)
    
    print("\nüìù –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏):")
    for query in simple_queries:
        should_use_multi = _should_use_multi_agent_planning(query)
        status = "‚ùå –ú–ù–û–ì–û–ê–ì–ï–ù–¢–ù–´–ô" if should_use_multi else "‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π"
        print(f"  {status}: {query[:50]}...")
    
    print("\nüî¨ –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω—ã–º–∏):")
    for query in complex_queries:
        should_use_multi = _should_use_multi_agent_planning(query)
        status = "‚úÖ –ú–ù–û–ì–û–ê–ì–ï–ù–¢–ù–´–ô" if should_use_multi else "‚ùå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π"
        print(f"  {status}: {query[:50]}...")


def test_plan_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤"""
    
    print("\nüèóÔ∏è –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–æ–≤")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω
    streams = [
        SubAgentStream(
            stream_id="current_analysis",
            research_focus="Current State Analysis",
            description="Research current AI applications in healthcare",
            success_criteria="Comprehensive overview of current landscape",
            tool_requirements=["web_search", "crawl_tool"],
            estimated_calls=8
        ),
        SubAgentStream(
            stream_id="market_trends",
            research_focus="Market Dynamics",
            description="Analyze market trends and investment patterns",
            success_criteria="Complete market analysis with data",
            tool_requirements=["web_search", "python_repl"],
            estimated_calls=10
        )
    ]
    
    parallel_plan = create_parallel_plan(
        locale="ru-RU",
        title="AI Healthcare Impact Analysis",
        thought="Complex multi-dimensional research requiring parallel investigation",
        streams=streams,
        synthesis_strategy="Combine current state with market trends for comprehensive view"
    )
    
    print(f"\n‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å–æ–∑–¥–∞–Ω:")
    print(f"   üìä –†–µ–∂–∏–º: {parallel_plan.planning_mode}")
    stream_count = len(parallel_plan.subagent_streams) if parallel_plan.subagent_streams else 0
    print(f"   üéØ –ü–æ—Ç–æ–∫–æ–≤: {stream_count}")
    print(f"   ‚ö° –û–±—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤: {parallel_plan.get_estimated_total_calls()}")
    print(f"   üîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: {parallel_plan.is_parallel_mode}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω  
    from src.prompts.planner_model import Step, StepType
    
    steps = [
        Step(
            need_search=True,
            title="Research AI Applications",
            description="Find current AI applications in healthcare",
            step_type=StepType.RESEARCH
        )
    ]
    
    sequential_plan = create_sequential_plan(
        locale="ru-RU",
        title="Simple AI Research",
        thought="Straightforward research requiring single investigation path",
        steps=steps,
        has_enough_context=False
    )
    
    print(f"\n‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å–æ–∑–¥–∞–Ω:")
    print(f"   üìä –†–µ–∂–∏–º: {sequential_plan.planning_mode}")
    print(f"   üìù –®–∞–≥–æ–≤: {len(sequential_plan.steps) if sequential_plan.steps else 0}")
    print(f"   ‚ö° –û–±—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤: {sequential_plan.get_estimated_total_calls()}")
    print(f"   üîÑ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: {sequential_plan.is_sequential_mode}")


async def test_multi_agent_coordinator():
    """–¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    print("\nü§ñ –¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = Configuration(
        max_search_results=3,
        max_step_num=3,
        max_plan_iterations=1
    )
    
    coordinator = MultiAgentCoordinator(config)
    
    query = "Analyze the impact of AI on healthcare"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        tasks = await coordinator.create_parallel_research_plan(query, max_subagents=3)
        
        print(f"‚úÖ –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω —Å {len(tasks)} –∑–∞–¥–∞—á–∞–º–∏:")
        for i, task in enumerate(tasks, 1):
            print(f"   {i}. {task.research_focus}")
            print(f"      üéØ –§–æ–∫—É—Å: {task.description[:60]}...")
            print(f"      üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(task.tools)}")
            # Note: SubAgentTask doesn't have estimated_calls, skip this line
        
        print(f"\nüéØ –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏:")
        # Create proper State-like object
        from src.graph.types import State
        mock_state = State(
            research_topic=query,
            locale="en-US",
            observations=[],
            resources=[],
            plan_iterations=0,
            current_plan=None,
            final_report="",
            auto_accepted_plan=False,
            enable_background_investigation=True,
            background_investigation_results=None,
            use_multi_agent=False,
            subagent_results=[],
            research_mode="sequential"
        )
        should_use = should_use_parallel_research(mock_state)
        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å: {'‚úÖ –î–∞' if should_use else '‚ùå –ù–µ—Ç'}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {e}")


def test_integration_flow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    print("\nüîÑ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    
    test_cases = [
        {
            "query": "What is Python?",
            "expected_mode": "sequential",
            "expected_multi_agent": False
        },
        {
            "query": "Analyze the comprehensive market landscape of artificial intelligence in healthcare including current trends, major stakeholders, competitive dynamics, and future implications for patient care",
            "expected_mode": "parallel",
            "expected_multi_agent": True
        },
        {
            "query": "–ò—Å—Å–ª–µ–¥—É–π –≤–ª–∏—è–Ω–∏–µ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±—É–¥—É—â–∏—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π",
            "expected_mode": "parallel", 
            "expected_multi_agent": True
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\nüìã –¢–µ—Å—Ç –∫–µ–π—Å {i}:")
        print(f"   üìù –ó–∞–ø—Ä–æ—Å: {case['query'][:50]}...")
        
        # –¢–µ—Å—Ç —Ä–µ—à–µ–Ω–∏—è –æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        should_multi = _should_use_multi_agent_planning(case['query'])
        planning_correct = should_multi == case['expected_multi_agent']
        
        # –¢–µ—Å—Ç —Ä–µ—à–µ–Ω–∏—è –æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏
        mock_state = {"research_topic": case['query']}
        should_parallel = should_use_parallel_research(mock_state)
        
        print(f"   üß† –ú–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ' if planning_correct else '‚ùå'} {should_multi}")
        print(f"   ‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {'‚úÖ' if should_parallel else '‚ùå'} {should_parallel}")
        print(f"   üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∂–∏–º: {case['expected_mode']}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ú–ù–û–ì–û–ê–ì–ï–ù–¢–ù–û–ô –°–ò–°–¢–ï–ú–´ DEERFLOW")
    print("=" * 80)
    print("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ –æ–±—Ä–∞–∑—Ü—É Anthropic Research")
    print("=" * 80)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    test_planning_decision()
    test_plan_creation()
    test_integration_flow()
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    print("\nüîÑ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã...")
    asyncio.run(test_multi_agent_coordinator())
    
    print("\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 80)
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
    print("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤")
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º DeerFlow –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print()
    print("üöÄ –ì–û–¢–û–í–û –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
    print("   üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º —Ä–µ–∂–∏–º–∞–º–∏")
    print("   ü§ñ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–±–∞–≥–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
    print("   ‚ö° 3-4x —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("   üîß –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π")


if __name__ == "__main__":
    main() 